#!/usr/bin/env python
# coding: utf-8

# <img src=https://kto-ozvuchival.ru/wp-content/uploads/2017/12/kto-ozvuchivaet-toni-starka-na-russkom-800x500.jpg>
# <hr style="border: 10px solid green;" />
# 
# ## <span style="color:green">–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π<span>
# –ò–ª—å—è, —Å–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ü§ù
# 
# –û—Å—Ç–∞–≤–∏–ª –¥–æ–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ [—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –º–æ–¥–µ–ª–∏](#21-bullet)
#     
# –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –ø—Ä–æ–µ–∫—Ç –ø—Ä–∏–Ω—è—Çüëç

# <hr style="border: 2px solid green;" />
# 
# ## –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–≤–µ—Ä–∞
# 
# –ò–ª—å—è, –ø—Ä–∏–≤–µ—Ç! 
# 
# ü§ö–ú–µ–Ω—è –∑–æ–≤—É—Ç, –û–ª–µ–≥ –Æ—Ä—å–µ–≤, —è –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–≤–æ–π –ø—Ä–æ–µ–∫—Ç. –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ—Ç–∏–≤, —è –±—É–¥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ –Ω–∞ _–¢–´_ . –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º–æ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö - –º—ã –ø—Ä–µ–π–¥–µ–º –Ω–∞ _–í–´_ .
# 
# ü§ù–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–¥–∞–ª –ø—Ä–æ–µ–∫—Ç –≤–æ–≤—Ä–µ–º—è. –¢–æ–±–æ–π –ø—Ä–æ–¥–µ–ª–∞–Ω–∞ –±–æ–ª—å—à–∞—è —Ä–∞–±–æ—Ç–∞, –º–æ–ª–æ–¥–µ—Ü! 
# 
# ‚úèÔ∏è–í —ç—Ç–æ–π —Ç–µ—Ç—Ä–∞–¥–∫–µ —Ç—ã –Ω–∞–π–¥–µ—à—å –º–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
# 
# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç –≤—ã–¥–µ–ª–µ–Ω—ã:
# 
# <div style="border:solid green 2px; padding: 20px"> <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞</b><br>
#     –ë–µ–∑—É–ø—Ä–µ—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞</div>       
# <br>
# <div style="border:solid orange 2px; padding: 20px"> <b>–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å</b><br>
#     –ù–∏—á–µ–≥–æ –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ –Ω–∞–¥–æ, –¥–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ –µ—Å—Ç—å —Å–ø–æ—Å–æ–±—ã —É–ª—É—á—à–∏—Ç—å. –ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–æ–ø—É—Å—Ç–∏–º—ã, –Ω–æ –±–æ–ª–µ–µ - –ø—Ä–∏–¥–µ—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å. –ë–æ–ª—å—à–æ–µ –∫–æ–ª-–≤–æ –º–µ–ª–∫–∏—Ö –∑–∞–º–µ—á–∞–Ω–∏–π –∏ –ø–æ–º–∞—Ä–æ–∫ —Å–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –Ω–∞ –æ–±—â–µ–º –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–∏ –æ—Ç —Ä–∞–±–æ—Ç—ã.</div>   
# <br>
# <div style="border:solid red 2px; padding: 20px"> <b>–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å</b><br>
#     –¢–∞–∫–∏–µ –ø—É–Ω–∫—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å, —á—Ç–æ–±—ã —è —Å–º–æ–≥ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–æ–µ–∫—Ç.</div>
#  
# –ù–µ —É–¥–∞–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Ç–∞–∫ –±—É–¥–µ–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –¥–∏–Ω–∞–º–∏–∫–æ–π üìà
#    
# –î–∞–≤–∞–π –±—É–¥–µ–º –≤ –¥–∏–∞–ª–æ–≥–µ - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–ª–∏ –≤ –¥–∏–∞–ª–æ–≥–µ:
# - –æ–±–º–µ–Ω –æ–ø—ã—Ç–æ–º (–¥–∞ —è —Ç–æ–∂–µ —É—á—É—Å—å —É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤üë®‚Äçüéì)
# - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –µ—â–µ –ª—É—á—à–µ
# - –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å—Ç–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º
# 
# –ü–æ—ç—Ç–æ–º—É —á—Ç–æ–±—ã –º–Ω–µ –ø—Ä–æ—â–µ –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ, –∞ —Ç–µ–±–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≤—å—é, –æ—Å—Ç–∞–≤–ª—è–π —Å–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –≤—ã–¥–µ–ª—è–π –∏—Ö. 
#     
# <div class="alert alert-info" style="border:solid blue 2px; padding: 20px"> <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞:</b> –ù–∞–ø—Ä–∏–º–µ—Ä, –≤–æ—Ç —Ç–∞–∫.</div>
#    
# –ü–æ–µ—Ö–∞–ª–∏! :)
# 
# <hr style="border: 2px solid green;" />

# # –û—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤

# –ò–∑ ¬´–ë–µ—Ç–∞-–ë–∞–Ω–∫–∞¬ª —Å—Ç–∞–ª–∏ —É—Ö–æ–¥–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—ã. –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü. –ù–µ–º–Ω–æ–≥–æ, –Ω–æ –∑–∞–º–µ—Ç–Ω–æ. –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∏ –ø–æ—Å—á–∏—Ç–∞–ª–∏: —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–µ–∫—É—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–µ—à–µ–≤–ª–µ, —á–µ–º –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –Ω–æ–≤—ã—Ö.
# 
# –ù—É–∂–Ω–æ —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å, —É–π–¥—ë—Ç –∫–ª–∏–µ–Ω—Ç –∏–∑ –±–∞–Ω–∫–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–µ—Ç. –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å –±–∞–Ω–∫–æ–º. 
# 
# –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –º–æ–¥–µ–ª—å —Å –ø—Ä–µ–¥–µ–ª—å–Ω–æ –±–æ–ª—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º *F1*-–º–µ—Ä—ã. –ß—Ç–æ–±—ã —Å–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ, –Ω—É–∂–Ω–æ –¥–æ–≤–µ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫—É –¥–æ 0.59. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ *F1*-–º–µ—Ä—É –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.
# 
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ—Ä—è–π—Ç–µ *AUC-ROC*, —Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ —Å *F1*-–º–µ—Ä–æ–π.
# 
# –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: [https://www.kaggle.com/barelydedicated/bank-customer-churn-modeling](https://www.kaggle.com/barelydedicated/bank-customer-churn-modeling)
# 
# –ü—Ä–∏–∑–Ω–∞–∫–∏
# * RowNumber ‚Äî –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö
# * CustomerId ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
# * Surname ‚Äî —Ñ–∞–º–∏–ª–∏—è
# * CreditScore ‚Äî –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
# * Geography ‚Äî —Å—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è
# * Gender ‚Äî –ø–æ–ª
# * Age ‚Äî –≤–æ–∑—Ä–∞—Å—Ç
# * Tenure ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —É –∫–ª–∏–µ–Ω—Ç–∞
# * Balance ‚Äî –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—á—ë—Ç–µ
# * NumOfProducts ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –±–∞–Ω–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–º
# * HasCrCard ‚Äî –Ω–∞–ª–∏—á–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã
# * IsActiveMember ‚Äî –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
# * EstimatedSalary ‚Äî –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
# 
# –¶–µ–ª–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫
# * Exited ‚Äî —Ñ–∞–∫—Ç —É—Ö–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞

# ### 1 [–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö](#–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞_–¥–∞–Ω–Ω—ã—Ö)
# 
#    #### 1.1 [–ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫](#–∏–º–ø–æ—Ä—Ç_–±–∏–±–ª–∏–æ—Ç–µ–∫)
#    
#    #### 1.2 [–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö](#–æ–±—Ä–∞–±–æ—Ç–∫–∞_–¥–∞–Ω–Ω—ã—Ö)
#    
# ### 2 [–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏](#–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ_–∑–∞–¥–∞—á–∏)
#    
#    #### 2.1 [–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏](#–ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞)
#    
#    #### 2.2 [–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤](#–æ–±—Ä–∞–±–æ—Ç–∫–∞)
#    
#    #### 2.3 [–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–æ–≤](#—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ)
#    
#    #### 2.3 [–û–±—É—á–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏](#–ª–∏–Ω–µ–π–Ω–∞—è)
#    
#    #### 2.3 [–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å](#–ª–µ—Å)
#    
#    #### 2.3 [–†–µ—à–∞—é—â–µ–µ –¥–µ—Ä–µ–≤–æ](#–¥–µ—Ä–µ–≤–æ)
#    
#    #### 2.3 [–ò—Ç–æ–≥](#–ò—Ç–æ–≥1)
# 
# ### 3 [–ë–æ—Ä—å–±–∞ —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º](#–¥–∏—Å–±–∞–ª–∞–Ω—Å)
#    
#    #### 3.2 [–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–æ–≤](#–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞)
#    
#    #### 3.3 [–†–µ—à–∞—é—â–µ–µ –¥–µ—Ä–µ–≤–æ](#–î–µ—Ä–µ–≤–æ_–±–∞–ª–∞–Ω—Å)
#    
#    #### 3.3 [–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å](#–õ–µ—Å_–±–∞–ª–∞–Ω—Å)
#    
#    #### 3.3 [–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞](#–ª–µ—Å_–±–∞–ª–∞–Ω—Å)
#    
#    #### 3.3 [–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–µ—Ä–µ–≤–∞](#–¥–µ—Ä–µ–≤–æ_–±–∞–ª–∞–Ω—Å)
# 
# ### 4 [–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏](#—Ç–µ—Å—Ç_–º–æ–¥–µ–ª–∏)
# 

# <div style="border:solid green 2px; padding: 20px"> <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞</b><br>
# –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ - –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—è—Ç–Ω–æ —Å—Ä–∞–∑—É –ø–æ–Ω–∏–º–∞—Ç—å –æ —á–µ–º –ø–æ–π–¥–µ—Ç —Ä–µ—á—å</div> 

# <a class="anchor" id="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞_–¥–∞–Ω–Ω—ã—Ö"></a>
# # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö

# –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
# –û—Ü–µ–Ω–∫–∞ –æ–±—å–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
# –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö

# <a id="–∏–º–ø–æ—Ä—Ç_–±–∏–±–ª–∏–æ—Ç–µ–∫"></a>
# ### 1.1 –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫

# In[4]:


import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import f1_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import roc_curve
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from tqdm import tqdm
from sklearn.metrics import roc_auc_score
from sklearn.metrics import recall_score
from sklearn.metrics import precision_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.utils import shuffle
import warnings
warnings.filterwarnings(action='once')


# <a id="–æ–±—Ä–∞–±–æ—Ç–∫–∞_–¥–∞–Ω–Ω—ã—Ö"></a>
# ### 1.2 –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö

# In[5]:


#–∑–∞–≥—Ä—É–∑–∏–º –¥–∞–Ω–Ω—ã–µ
data = pd.read_csv("/datasets/Churn.csv")


# In[6]:


#–ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏ –∏ —Ç–∏–ø—ã–¥–∞–Ω–Ω—ã—Ö.
data.isna().mean()


# In[7]:


data.info()


# In[8]:


data.head(10)


# 
# –û–±—Ä–∞–±–æ—Ç–∫–∞:
# 
#   * –£–±—Ä–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, —É–¥–∞–ª–∏—Ç—å –Ω–µ –Ω—É–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏. "Surname".
#    
#   * –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞ Tenure –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ int
#   
#   * –ù–∞ –ø–µ—Ä–≤–æ–º –∫—Ä—É–≥–µ –±—É–¥–µ–º –æ–±—É—á–∞—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ—ç—Ç–æ–º—É —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç–∞—Å–µ—Ç –±–µ–∑ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π. –ó–∞–ø–æ–ª–Ω–∏–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–¥–∏–∞–Ω–æ–π.
#   
#   
#     
#     

# <div style="border:solid orange 2px; padding: 20px"> <b>–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å</b><br>
# –ó–∞—Ç–µ—è —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ —Ö–æ—Ä–æ—à–∞—è (–∫–∞–∫ –ø—Ä–∞–∫—Ç–∏–∫–∞), –Ω–æ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –æ–∫–æ–ª–æ 1% –Ω–µ –ø–æ–≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 10 –±–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤—ã–≥–ª—è–¥–∏—Ç —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º —Ä–∞–¥–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –Ω–∞ 1% –¥–∞–Ω–Ω—ã—Ö.<br>
# –ß–µ–º –∑–∞–ø–æ–ª–Ω—è—Ç—å, –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –∏—Å—Ö–æ–¥—è –∏–∑ –º–æ–¥–µ–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –¥–µ—Ä–µ–≤—å–µ–≤ –∏ –ª–µ—Å–æ–≤ –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 9999.<br>
# –ü—Ä–∏ –≤—Å–µ–π –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ 1% –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏ —Å—Ä–µ–¥–Ω–∏–º\–º–µ–¥–∏–∞–Ω–æ–π –∏–ª–∏ —Å—Ä–µ–¥–Ω–∏\–º–µ–¥–∏–∞–Ω–æ–π –ø–æ –≥—Ä—É–ø–ø–µ —Ü–µ–ª–µ–≤–æ–π</div>  

# <div class="alert alert-info" style="border:solid blue 2px; padding: 20px"> 
# –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≤–µ—Ç, –∑–∞–ø–æ–ª–Ω–∏–ª –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–¥–∏–∞–Ω–æ–π.
# </div>

# <div style="border:solid green 2px; padding: 20px"> <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ 2</b><br>üëç</div> 

# In[9]:


# –ü—Ä–∏–≤–µ–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
data.columns = data.columns.str.lower()


# In[10]:


data['tenure'].median()


# In[11]:


data['tenure'].mean()


# In[12]:


data['tenure'].fillna(data['tenure'].median(),inplace=True)


# In[13]:


data['exited'].mean()


# In[14]:


# –∑–∞–º–µ–Ω–∏–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö tenure –Ω–∞ int 
data['tenure'] = data['tenure'].astype('int64',errors='ignore') 


# In[15]:


data.info()


# In[16]:


#data = data.fillna('unknown')


# In[ ]:





# In[17]:


data.info()


# –ò—Ç–æ–≥
# –ü—Ä–æ–≤–µ–¥–µ–Ω–∞ –ø–µ—Ä–≤–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. 

# <div style="border:solid orange 2px; padding: 20px"> <b>–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å</b><br>
# –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –º—ã –µ—â–µ –Ω–µ –≤–∏–¥–µ–ª–∏, –ø–æ—ç—Ç–æ–º—É —Ö–æ—Ä–æ—à–µ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π –±—É–¥–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∏—Ö –≥–ª—É–±–∂–µ. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç—Ä–∏—Ü—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π - –º–æ–∂–µ—Ç —É–¥–∞—Å—Ç—å—Å—è –≤—ã—è–≤–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏ –∏–ª–∏ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –≤ —Ä–∞–∑—Ä–µ–∑–∞—Ö —Ü–µ–ª–µ–≤–æ–π.</div> 

# <div class="alert alert-info" style="border:solid blue 2px; padding: 20px"> –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Å–∫–∞–∑–∫—É, —è —É—á—Ç—É —ç—Ç–æ –≤ –±—É–¥—É—â–µ–º</div>

# <div style="border:solid green 2px; padding: 20px"> <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ 2</b><br>üëç</div> 

# <a class="anchor" id="–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ_–∑–∞–¥–∞—á–∏"></a>
# # 2. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

# ### 2.1 –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏
# 

# –¶–µ–ª—å - –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–π–¥—ë—Ç –∫–ª–∏–µ–Ω—Ç –∏–∑ –±–∞–Ω–∫–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–µ—Ç. 
# 
# –ó–∞–¥–∞—á–∞ —è–≤–ª—è–µ—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–π. –ë—É–¥–µ–º –ø—Ä–∏–º–µ–Ω—è—Ç—å –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, 1 - –∫–ª–∏–µ–Ω—Ç —É–π–¥–µ—Ç 0 - –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç—Å–∞–Ω–µ—Ç—Å—è. 
# 
# –õ—É—á—à–∏–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏ –±—É–¥—É—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–º –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –∫–ª–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–∫–∏–Ω—É—Ç—å –Ω–∞—Å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
# 
# –û—Å–Ω–æ–≤–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏–µ–º –æ—Ü–µ–Ω–∫–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏ –±—É–¥–µ—Ç F-–ú–µ—Ä–∞ (F1-score), —Ç–∞–∫ –∂–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø—Ä–µ–¥—Ç—Å–∞–≤–ª–µ–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ AUC-ROC –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫—Ä–∏–≤–æ
# 
# –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 3 –º–æ–¥–µ–ª–∏, –ª–∏–Ω–µ–π–Ω—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é,—Ä–µ—à–∞—é—â–µ–µ –¥–µ—Ä–µ–≤–æ –∏ —Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å.
# 

# ### –ü–ª–∞–Ω —Ä–∞–±–æ—Ç
# - [x] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫ –Ω–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å
# - [x] –û—Ç–æ–±—Ä–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å   
# - [x] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–±–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π, –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–π –∏ —Ç–µ—Å—Ç–æ–≤—ã–π
# - [x] –ü—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
# - [x] –í—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
# - [x] –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –≥–∏–ø–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–º –Ω–∞–±–æ—Ä–µ
# - [x] –û—Ü–µ–Ω–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–∞—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
# - [ ] –í—ã–≤–æ–¥ 
# 
# 

# <a id="–æ–±—Ä–∞–±–æ—Ç–∫–∞"></a>
# ### 2.2 –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤

# In[18]:


#–ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Ü–µ–ª–µ–≤–æ—Ü –ø—Ä–∏–∑–Ω–∞–∫
data['exited'].plot(kind='hist')


# In[19]:


data['exited'].mean()


# –î–æ–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –¥–∞–¥—Ç–∞—Å–µ—Ç–µ  —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–µ–≥–æ 20%, —ç—Ç–æ –º–æ–∂–µ—Ç —Å–∫–∞–∑–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –º–æ–¥–µ–ª–∏. –í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç —Ä–µ–∂–µ –æ—Ç–Ω–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º—É –∫–ª–∞—Å—Å—É.
# 

# <div style="border:solid green 2px; padding: 20px"> <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞</b><br>
# –î–∞, —ç—Ç–æ –≤–µ—Ä–Ω–æ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ. –î—É–º–∞—é –Ω–∞–º —É–¥–∞—Å—Ç—å—Å—è —Å —ç—Ç–∏–º —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è</div>  

# In[20]:


#–£–¥–∞–ª–∏–º –ª–∏—à–Ω–∏–µ –ø—Ä–∏–∑–∞–Ω–∫–∏
data = data.drop(['rownumber','customerid','surname'],axis=1)


# In[21]:


#–î–ª—è –æ–±–æ—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–≤–µ–¥–µ–º –ø—Ä—è–º–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
data = pd.get_dummies(data, drop_first=True)


# In[22]:


data


# <a id="–æ–±—Ä–∞–±–æ—Ç–∫–∞"></a>
# ### 2.3 –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö 

# In[23]:


# –ò–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç—Ä–∏ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π, –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–π –∏ —Ç–µ—Å—Ç–æ–≤—ã–π 70/15/15
#–ø—Ä–∏–∑–Ω–∞–∫–∏
x = data.drop(['exited'],axis=1)
#—Ü–µ–ª–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫
y = data['exited']
x_train, x_remainder, y_train, y_remainder = train_test_split(x, y, test_size=0.4, random_state=12345)
#–†–∞–∑–¥–µ–ª–∏–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—Ü—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –Ω–∞–±–æ—Ä—ã
x_valid, x_test, y_valid, y_test = train_test_split(x_remainder, y_remainder, test_size=0.5, random_state=12345)

#–ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–±–∏–≤–∫—É
print('–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞:',len(x))
print('–†–∞–∑–º–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞:',len(x_valid),len(y_valid))
print('–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞',len(x_test),len(y_test))
print("–†–∞–∑–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ  –Ω–∞–±–æ—Ä–∞:",len(x_train),len(y_train))
print("–°—É–º–º–∞ –≤—Å–µ—Ö –Ω—Ä–∞–∑–±–∏–≤–æ–∫:",len(x_valid)+len(x_test)+len(x_train))


# In[26]:


y_test


# <div style="border:solid green 2px; padding: 20px"> <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞</b><br>
# –ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—à—å —Å–µ–±—èüëå</div>  

# In[1]:


# –î–ª—è –º–æ–¥–µ–ª–∏ –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è —Å–¥–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç, 
# –∏ —Å–¥–µ–ª–∞–µ–º –º–∞—Å—à–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ creditscore,age,balance,estimatedsalary
numeric = ['creditscore','age','balance','estimatedsalary']
scaler = StandardScaler()

scaler.fit(x_train[numeric])
x_train_scale = x_train.copy()
x_valid_scale = x_valid.copy()       

x_train_scale[numeric] = scaler.transform(x_train_scale[numeric])
x_valid_scale[numeric] = scaler.transform(x_valid_scale[numeric])


# In[ ]:


x_train_scale


# In[ ]:


x_valid_scale


# In[ ]:


x_train


# In[ ]:


x_valid


# In[ ]:


# –°–æ–∑–¥–∞–¥–∏–º –¥–∞–¥–∞—Å–µ—Ç –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –º–æ–¥–µ–ª–µ–π.
columns=['model_name','roc_auc_scores','recall_scores','precision_scores','f1_scores','tn','fp','fn','tp']
result_metric = pd.DataFrame(columns=columns)


# In[ ]:


result_metric


# In[ ]:


#–ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º —Å–¥–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ 
def metrics_model(model_name,y_valids,predictions,probabilites_one):
    global result_metric
    #roc_auc_scores =0
    roc_auc_scores = roc_auc_score(y_valids, probabilites_one)
    
    #recall_scores=0
    recall_scores = recall_score(y_valids, predictions)
    
    #precision_scores=0
    precision_scores = precision_score(y_valids, predictions)
    
    #f1_scores=0
    f1_scores = f1_score(y_valids, predictions)
    
    tn, fp, fn, tp = confusion_matrix(y_valids, predictions).ravel()

    #result_metric = result_metric.append({'model_name':model_name,'roc_auc_scores':roc_auc_scores,
                       #  'recall_scores':recall_scores,'precision_scores':precision_scores,'f1_scores':f1_scores,
                        #  'tn':tn,'fp':fp,'fn':fn,'tp':tp},ignore_index=True)
    
    #result_metric.drop_duplicates(inplace=True)
    
    result = ({'model_name':model_name,'roc_auc_scores':roc_auc_scores,
                         'recall_scores':recall_scores,'precision_scores':precision_scores,'f1_scores':f1_scores,
                          'tn':tn,'fp':fp,'fn':fn,'tp':tp})
    return result


# <div style="border:solid green 2px; padding: 20px"> <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞</b><br>
# –û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è —Å–æ–±—Ä–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –≤ –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—É‚úÖ</div>       
# <br>
# <div style="border:solid orange 2px; padding: 20px"> <b>–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å</b><br>
# –ù–∞ –±—É–¥—É—â–µ–µ, –Ω–µ —Å–æ–≤–µ—Ç—É—é —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ—É–∫–Ω—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∏–∑–º–µ–Ω—è–µ—Ç –≤–Ω–µ—à–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ. <br>
# –ö–æ—Ä—Ä–µ–∫—Ç–Ω–µ–µ —á—Ç–æ–±—ã —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–ª–∞ —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Ç–∞–±–ª–∏—Ü–µ.</div>  

# <div class="alert alert-info" style="border:solid blue 2px; padding: 20px"> –ù–∞–º–µ–∫ –ø–æ–Ω—è—Ç, —Å–ø–∞—Å–∏–±–æ.–ü–æ–ø—Ä–∞–≤–∏–ª.

# In[ ]:


def figure():
    f, ax = plt.subplots(figsize=(6,6))
    
    #plt.axhspan(0,1,0,1,color='#d62728')
    ax.plot([0, 1], [0, 1], ls="--",color='#d62728')
    return ax


# In[ ]:


#–§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
def roc (y_valid,probabilites_one,name,axis):
   
    fpr, tpr, thresholds = roc_curve(y_valid, probabilites_one)
    roc_auc = pd.DataFrame({'fpr':fpr,'tpr':tpr,'thresholds':thresholds})
    roc_auc['fpr_i'] = roc_auc['fpr']
    
    fig = plt.figure()
    
    #ax = axis
    #fig.add_subplot(title='ROC_AUC'+ name)

    roc_auc.plot(x='fpr',y='tpr',ax=axis,label=name,grid=True)


# –î–∞–Ω–Ω—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–±–æ—Ä—ã. 

# <a id="–ª–∏–Ω–µ–π–Ω–∞—è"></a>
# ### 2.4 –û–±—É—á–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏

# In[29]:


#–æ–±—É—á–∏–º –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –ª–æ–≥–∏—á—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é –Ω–∞ –ø—Ä–æ—Å—Ç–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ
lr = LogisticRegression(solver='liblinear',random_state=12345)
lr.fit(x_train,y_train)


# In[30]:


#–æ–±—É—á–∏–º –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –ª–æ–≥–∏—á—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é –Ω–∞  –¥–∞—Ç–∞—Å–µ—Ç–µ —Å –º–∞—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
lr_scale = LogisticRegression(solver='liblinear',random_state=12345)
lr_scale.fit(x_train_scale,y_train)


# In[ ]:


#–ü—Ä–æ–≤–µ—Ä–∏–º –º–æ–¥–µ–ª—å –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–º –Ω–∞–±–æ—Ä–µ ¬†–∏ –Ω–∞ –Ω–∞–±–æ—Ä–µ —Å –º–∞—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
predicted_lr_valid = lr.predict(x_valid)


# In[ ]:


predicted_lr_scale_valid = lr_scale.predict(x_valid_scale)


# In[ ]:


probabilites_lr_one = lr.predict_proba(x_valid)[:,1]


# In[ ]:


probabilites_lr_one_scale = lr_scale.predict_proba(x_valid_scale)[:,1]


# In[ ]:


result_metric=result_metric.append(metrics_model('lr',
              y_valid,predicted_lr_valid,
              probabilites_lr_one),ignore_index=True)


# In[ ]:


result_metric=result_metric.append(metrics_model('lr_scale',
                                   y_valid,predicted_lr_scale_valid,
                                   probabilites_lr_one_scale),ignore_index=True)


# In[ ]:


ax = figure()
roc(y_valid,probabilites_lr_one,' lr',ax)
roc(y_valid,probabilites_lr_one_scale," lr_scale",ax)


# <div style="border:solid orange 2px; padding: 20px"> <b>–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å</b><br>
# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –±—ã –Ω–∞–≥–ª—è–¥–Ω–µ–µ, –±—É–¥—å –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–∞ –æ–¥–Ω–æ–π —Ñ–∏–≥—É—Ä–µ. –ö—Å—Ç–∞—Ç–∏ —ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª—Ç—å, –µ—Å–ª–∏ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–±—ä–µ–∫—Ç <b>ax</b>. –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ –ª–∏–Ω–∏—é –ø–æ–¥ —Å–ª—É—á–∞–π–Ω–æ–π –º–æ–¥–µ–ª–∏ (–ø–æ–¥ 45 –≥—Ä–∞–¥—É—Å–æ–≤), —á—Ç–æ–±—ã –≤–∏–∑—É–∞–ª—å–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –Ω–∞—Å–∫–æ–ª—å–∫–æ –º—ã –≤—ã—à–µ</div>  

# <div class="alert alert-info" style="border:solid blue 2px; padding: 20px"> –°–æ–≤–µ—Ç —Ö–æ—Ä–æ—à–∏–π, —Å–ø–∞—Å–∏–±–æ.–£–ª—É—á—à–∏–ª.</div>

# <div style="border:solid green 2px; padding: 20px"> <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ 2</b><br>üëç–î–ª—è –±–æ–ª—å—à–µ–π —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É –∫—Ä–∏–≤—ã–º–∏ - <a href="https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.fill_between.html">fill_between</a></div> 

# #### –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∏—Ç–æ–≥ –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏:
# 
# –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è:
# 
# –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ,–ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ –¥–≤—É—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö —Å –º–∞—Å—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –±–µ–∑, –æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏. 
# 
# –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ –ø–æ–∫–∞–∑–∞–ª–∞, —á—Ç–æ –º–æ–¥–µ–ª—å —Å–ª–∞–±–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç –∏–∑-–∑–∞ —ç—Ç–æ–≥–æ recall –æ—á–µ–Ω—å –º–∞–ª.
# 
# –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å ROC AUC –≤—Å–≥–æ 0,75 –¥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ, –≤—Ä—è—Ç–ª–∏ –ø–æ–ª—É—á–∏—Ç—Å—è —Å–∏–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –µ–≥–æ. –¶–µ–ª–µ–≤–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ç–æ–∂–µ –æ—á–µ–Ω—å –º–∞–ª.
# 
# –î–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–∞–ª–µ–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –Ω–µ –±—É–¥–µ–º
# 

# <a id="–ª–µ—Å"></a>
# ### 2. 5 –ú–æ–¥–µ–ª—å "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å"

# –ú–æ–¥–µ–ª—å —Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å –±—É–¥–µ–º –æ–±—É—á–∞—Ç—å –Ω–∞ –æ–±—á–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ, –±–µ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è.
# 
# 

# In[28]:


warnings.filterwarnings('ignore')
# –ø–æ–¥–±–µ—Ä–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ–¥–µ–ª–∏
best_score = 0
max_est = 0
max_depth = 0
for est in range(1,30,1):
    for depth in range(1,40,1):
        
        clf = RandomForestClassifier(n_estimators=est, max_depth=depth,random_state=12345)
        clf.fit(x_train,y_train)
        predicted = clf.predict(x_valid)
        res_score = f1_score(y_valid,predicted)
    
        if best_score < res_score:
            best_score = res_score
            max_est = est
            max_depth = depth
   
print('–≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã')   
print("n_estimators:",max_est,'max_depth', max_depth, 'f1',best_score) 


# <div style="border:solid orange 2px; padding: 20px"> <b>–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å</b><br>
# –î–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö –µ—Å—Ç—å –Ω–µ –≤—Å–µ –º–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–æ–≤ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ y_true, –ø–æ—ç—Ç–æ–º—É f1_score —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ 0. –ß—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑, –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π <code>warnings</code> - –∏ –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ - <code>warnings.filterwarnings('once')</code><br><br>
# –¢—ã –≤ —Ü–∏–∫–ª–µ –ø—Ä–∏–±–∞–≤–ª—è–µ—à—å –ø–æ –æ–¥–Ω–æ–º—É –¥–µ—Ä–µ–≤—É, —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É 10 –∏ 11 –¥–µ—Ä–µ–≤—å—è–º–∏ –æ—á–µ–Ω—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è, –ª—É—á—à–µ, –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å –¥–µ—Ä–µ–≤—å—è —á–µ—Ä–µ–∑ 5\10 –∏ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–µ —Å 1, –∞,–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å 10. –í –ø–æ–º–æ—â—å –æ—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç—å—è <a href="https://dyakonov.org/tag/random-forest/">–ü—Ä–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã RandomForest</a></div>  

# <div class="alert alert-info" style="border:solid blue 2px; padding: 20px"> –°–ø–∞—Å–∏–±–æ.–ü–æ–ø—Ä–∞–≤–∏–ª.</div>

# In[ ]:





# In[27]:


#–ü—Ä–æ–≤–µ—Ä–∏–º –º–æ–¥–µ–ª—å
clf = RandomForestClassifier(n_estimators=max_est, max_depth=max_depth,random_state=12345)


# In[ ]:


clf.fit(x_train, y_train)


# In[ ]:


#–ü–æ–ª—á–∏–º –ø—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏ 
predicted_clf_valid = clf.predict(x_valid)


# In[ ]:


#–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å 
probabilites_clf_one = clf.predict_proba(x_valid)[:,1]


# In[ ]:


result_metric=result_metric.append(metrics_model('clf',y_valid, predicted_clf_valid,
                          probabilites_clf_one),ignore_index=True)


# In[ ]:


ax = figure()
roc(y_valid,probabilites_clf_one,"clf",ax)


# In[ ]:


result_metric


# #### –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∏—Ç–æ–≥ –¥–ª—è –º–æ–¥–µ–ª–∏ –°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å
# –ú–æ–¥–µ–ª—å "—Ä–µ—à–∞—é—â–µ–µ –¥–µ—Ä–µ–≤–æ"  —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ. —Ä–µ–∑—É–ª—å—Ç—ã –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.
# 
# 
# –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å roc_auc_score –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –º–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —á–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–∞–Ω–¥–æ–º.
# 
# –£ –º–æ–¥–µ–ª–∏ —Ä–µ—à–∞—é—â–µ–≥–æ –¥–µ—Ä–µ–≤–∞  —Ö–æ—Ä–æ—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å—é, –Ω–æ –ø–æ–ª–Ω–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–≤–µ–ª–∏—á–∏—Ç—å.
# 
# –ú–æ–¥–µ–ª—å —Ö–æ—Ä–æ—à–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è. –ù–æ –µ—â–µ –ø–ª–æ—Ö–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç  —Ç–µ—Ö –∫—Ç–æ —É–π–¥–µ—Ç, –≤–µ—Ä–æ—è—Ç–Ω–æ –ø–æ—Ç–æ–º—É –∫–∞–∫  –º–∞–ª–æ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞. 
# –° —Ç–µ–∫—É—â–∏–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –º–æ–∂–Ω–æ –¥–æ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ.
# 
# 

# <div style="border:solid green 2px; padding: 20px"> <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞</b><br>
# –í–µ—Ä–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. –•–æ—Ç—è roc_auc —É –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –≤—ã—à–µ —á–µ–º —Ä–∞–Ω–¥–æ–º =)</div>      

# <a id="–¥–µ—Ä–µ–≤–æ"></a>
# ### 2.5 –†–µ—à–∞—é—â–µ–µ –¥–µ—Ä–µ–≤–æ

# In[ ]:


warnings.filterwarnings('ignore')
best_score = 0
max_depth = 0
for depht in range(1,60,1):
    tree = DecisionTreeClassifier(max_depth=depht,random_state=12345)
    tree.fit(x_train,y_train)
    predicted_tree = tree.predict(x_valid)
    
    res_score = f1_score(y_valid,predicted_tree)
    
    if best_score < res_score:
        best_score = res_score
        max_depth = depht
       
print('–≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã')            
print("max_depth:",max_depth, 'f1-score',best_score)


# In[ ]:


tree = DecisionTreeClassifier(max_depth=max_depth,random_state=12345)


# In[ ]:


tree.fit(x_train,y_train)


# In[ ]:


predicted_tree_valid = tree.predict(x_valid)


# In[ ]:


probabilites_tree_one = tree.predict_proba(x_valid)[:,1]


# In[ ]:


result_metric=result_metric.append(metrics_model('tree', 
              y_valid, predicted_tree_valid,
              probabilites_tree_one),ignore_index=True)


# In[ ]:


ax = figure()
roc(y_valid,probabilites_tree_one,'tree',ax)


# In[ ]:


result_metric


# <a id="–ò—Ç–æ–≥1"></a>
# ## 2. 7 –ò—Ç–æ–≥
# 
# –ü—Ä–æ–≤–µ–¥–µ–Ω–æ –æ–±—É—á–µ–Ω–∏–µ —Ç—Ä–µ—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö, —Å –º–∞—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –±–µ–∑. –í—ã–¥–µ–ª–∏–º  —Ç–æ–ø –º–æ–¥–µ–ª–∏ –ø–æ —Ü–µ–ª–µ–≤–æ–º—É –¥–ª—è –Ω–∞—à–µ–π –∑–∞–¥–∞—á–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è 
# 
# 1. "–†–µ—à–∞—é—â–µ–µ –¥–µ—Ä–µ–≤–æ" - –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ –±–µ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è 
#     
#   **F1-–ú–µ—Ä–∞ = 0,59**
# 
# 
# 2. "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å" - –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ –±–µ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è.
# 
#   **F1-–ú–µ—Ä–∞ = 0,56**
#  
# 
# –í—Å–µ –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–∞—é—Ç –º–Ω–æ–≥–æ –ª–æ–∂–Ω–æ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. –î–ª—è —Ä–µ—à–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤ –≤—Ä—É—á–Ω—É—é. –ü–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–æ–±—É—á–∏–º –º–æ–¥–µ–ª–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º **class_weight**.
# 
# 
# 
# 

# # 3. –ë–æ—Ä—å–±–∞ —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º

# <a id="–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞"></a>
# ### 3.1 –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ 
# 

# In[ ]:


y_valid.plot(kind='hist')


# In[ ]:


def upsample(x, y, repeat):
    x_zeros = x[y == 0]
    x_ones = x[y == 1]
    y_zeros = y[y == 0]
    y_ones = y[y == 1]

    x_upsampled = pd.concat([x_zeros] + [x_ones] * repeat)
    y_upsampled = pd.concat([y_zeros] + [y_ones] * repeat)
    
    x_upsampled, y_upsampled = shuffle(
        x_upsampled, y_upsampled, random_state=12345)
    
    return x_upsampled, y_upsampled


# In[ ]:


x_upsampled, y_upsampled = upsample(x_train, y_train, 2)


# In[ ]:


y_upsampled.mean()


# In[ ]:


y_upsampled.plot(kind='hist')


# <a id="–î–µ—Ä–µ–≤–æ_–±–∞–ª–∞–Ω—Å"></a>
# ###  3.3 "–†–µ—à–∞—é—â–µ–µ –¥–µ—Ä–µ–≤–æ"

# In[ ]:


#–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å, –≤–µ—Ä–Ω–µ–º—è –∏ –ø–æ–¥–±–µ—Ä–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è


# In[ ]:


warnings.filterwarnings('ignore')
#–ü–æ–¥–±–µ—Ä–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ–¥–µ–ª–∏ –Ω–∞ –Ω–æ–≤–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ
best_score = 0
max_depth = 0
for depht in range(1,60,1):
    tree = DecisionTreeClassifier(max_depth=depht,random_state=12345)
    tree.fit(x_upsampled,y_upsampled)
    predicted = tree.predict(x_valid)
    res_score = f1_score(y_valid,predicted)
    if best_score < res_score:
        best_score = res_score
        max_depth = depht
            
print("–ì–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞:",max_depth, 'F1-–º–µ—Ä–∞',best_score)   


# In[ ]:


tree = DecisionTreeClassifier(max_depth=max_depth,random_state=12345)
tree.fit(x_upsampled,y_upsampled)


# In[ ]:


predicted_tree_valid = tree.predict(x_valid)


# In[ ]:


probabilites_tree_one = tree.predict_proba(x_valid)[:,1]


# In[ ]:


result_metric=result_metric.append(metrics_model('tree_balanced',
                                   y_valid, 
                                   predicted_tree_valid, 
                                   probabilites_tree_one),ignore_index=True)


# In[ ]:


result_metric


# <a id="–õ–µ—Å_–±–∞–ª–∞–Ω—Å"></a>
# ###  3.3 "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å" 

# In[ ]:


warnings.filterwarnings('ignore')
# –¢–µ–ø–µ—Ä—å –ø–æ–¥–±–µ—Ä–µ–º –∫–æ–ª-–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤
best_score = 0
max_est = 0
max_depth = 0
for est in range(1,40,1):
    for depth in range(1,30,1):
        
        clf = RandomForestClassifier(n_estimators=est, max_depth=depth,random_state=12345)
        clf.fit(x_upsampled,y_upsampled)
        predicted = clf.predict(x_valid)
        res_score = f1_score(y_valid,predicted)
    
        if best_score < res_score:
            best_score = res_score
            max_est = est
            max_depth = depth
print('–≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã')   
print("n_estimators:",max_est,'max_depth', max_depth, 'f1',best_score) 


# In[ ]:


clf = RandomForestClassifier(n_estimators=max_est, max_depth=max_depth,random_state=12345)
clf.fit(x_upsampled,y_upsampled)


# In[ ]:


predicted_clf_valid = clf.predict(x_valid)


# In[ ]:


probabilites_clf_one = clf.predict_proba(x_valid)[:,1]


# In[ ]:


result_metric=result_metric.append(metrics_model('clf_balanced',
                                                 y_valid, predicted_clf_valid,
                                                 probabilites_clf_one),ignore_index=True)


# In[ ]:


result_metric


# –ú–æ–¥–µ–ª—å "–°–ª—É—á–∞–π–Ω—ã –ª–µ—Å" –ø–æ–∫–∞–∑–∞–ª–∞ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ –º–æ–¥–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤—É –ø–æ –Ω–∞—à–µ–º—É —Ü–µ–ª–µ–≤–æ–º—É –ø—Ä–∏–∑–Ω–∞–∫—É
# –î–ª—è –º–æ–¥–µ–ª–∏ "—Ä–µ—à–∞—é—â–µ–µ –¥–µ—Ä–µ–≤–æ" –ø–æ—Å–ª–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –∫–ª–∞—Å—Å–æ–≤ —Ç–æ–∂–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.
# –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± –æ–±—É—á–∏–º –º–æ–¥–µ–ª—å –Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ, –Ω–æ  —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º class_weight='balanced' –∏ –ø—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

# In[ ]:


#–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å, –ø–æ–¥–±–µ—Ä–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
#—Å —É—á–µ—Ç–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ class_weight


# In[ ]:


best_score = 0
max_depth = 0
for depht in range(1,60,1):
    tree = DecisionTreeClassifier(max_depth=depht,random_state=12345,class_weight='balanced')
    tree.fit(x_train,y_train)
    predicted = tree.predict(x_valid)
    res_score = f1_score(y_valid,predicted)
    if best_score < res_score:
        best_score = res_score
        max_depth = depht
            
print("–ì–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞:",max_depth, 'Accuracy',best_score) 


# In[ ]:





# In[ ]:


tree = tree = DecisionTreeClassifier(max_depth=max_depth,
                                    random_state=12345,class_weight='balanced')


# In[ ]:


tree.fit(x_train,y_train)


# In[ ]:


predicted_tree_valid = tree.predict(x_valid)


# In[ ]:


probabilites_tree_one = tree.predict_proba(x_valid)[:,1]


# In[ ]:


result_metric=result_metric.append(metrics_model('tree_class_weight', 
                                                 y_valid, 
                                                 predicted_tree_valid, 
                                                 probabilites_tree_one),ignore_index=True)


# In[ ]:


result_metric


# ### –ò—Ç–æ–≥
# 
# –ü–æ—Å–ª–µ —Ä—É—á–Ω–æ–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –∫–ª–∞—Å—Å–æ–≤, f1-–º–µ—Ä–∞ –ø–æ–≤—ã—Å–∏–ª–∞—Å—å. –ù–∞–º —É–¥–∞–ª–æ—Å—å –ø–æ–≤—ã—Å–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø–æ–ª–Ω–æ—Ç—ã –¥–ª—è –æ–±–µ–∏—Ö –º–æ–¥–µ–ª–π, –Ω–æ –∏ –¥–æ–ª—è –ª–æ–∂–Ω–æ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å. 
# 
# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ–ª–Ω–æ—Ç—ã –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π.
# 
# 
# –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç  —É –º–æ–¥–µ–ª–∏ "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å".
# 
# –î–ª—è –º–æ–¥–µ–ª–∏ "—Ä–µ—à–∞—é—â–µ–µ –¥–µ—Ä–µ–≤–æ", –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –Ω–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤—Ä—É—á–Ω—É—é –¥–∞—Ç–∞—Å–µ—Ç–µ 

# <div style="border:solid green 2px; padding: 20px"> <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞</b><br>
# –í —à–∞–≥–µ –≤—Å–µ –≤–µ—Ä–Ω–æ. –¢–æ–ª—å–∫–æ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —Ç—ã –≤—ã–±—Ä–∞–ª –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è upsample, –¥–∏—Å–±–∞–ª–∞—Å–Ω –≤—Å–µ –µ—â–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π.</div>      

# <div style="border:solid orange 2px; padding: 20px"> <b>–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å</b><br>
# –ù–µ —É–≤–∏–¥–µ–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º <code>class_weight</code></div>   
# 

# <div class="alert alert-info" style="border:solid blue 2px; padding: 20px">–î–∞ —è –Ω–µ —Å—Ç–∞–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É–∂–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã. –ö–æ–æ—Ñ–∏—Ü–µ–Ω—Ç upsample —è –ø–æ–¥–±–∏—Ä–∞–ª –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—è—Å—å –Ω–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ü–µ–ª–µ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏. –ò–º–µ–Ω–Ω–æ –Ω–∞ —Ç–∞–∫–æ–º –±–∞–ª–∞–Ω—Å–µ —É –º–µ–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∏—Ç—å—Å—è –Ω—É–∂–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. </div>

# <div style="border:solid green 2px; padding: 20px"> <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ 2</b><br>üëç–û–∫, —Ç–∞–∫–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤–∞–∂–Ω—ã, –∏—Ö —Å–ª–µ–¥—É–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å</div> 

# <a id="–ø–æ—Ä–æ–≥_–ª–µ—Å"></a>
# ### –ü–æ—Ä–æ–≥ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞

# In[ ]:


probabilites_clf_one


# In[ ]:


f1_best = 0
thresh = 0
prec = 0
rec = 0
for threshold in np.arange(0.3, 0.8, 0.02):
    predictions = (probabilites_clf_one>threshold)*1
    #recall_scores=0
    recall = recall_score(y_valid, predictions)
    f1 = f1_score(y_valid,predictions)
    #precision_scores=0
    precision = precision_score(y_valid, predictions)
    
    if f1 > f1_best:
        f1_best = f1
        thresh = threshold
        prec = precision
        rec = recall
            
print("–ü–æ—Ä–æ–≥ = {:.2f} | –¢–æ—á–Ω–æ—Å—Ç—å = {:.3f}, –ü–æ–ª–Ω–æ—Ç–∞ = {:.3f}, f1-–º–µ—Ä–∞ = {:.3f}".format(
                                                thresh, prec, rec ,f1_best))


# In[ ]:


clf


# In[ ]:


probabilites_clf = clf.predict_proba(x_valid)


# In[ ]:


predicted_clf_valid = (probabilites_clf[:,1] > 0.46)*1


# In[ ]:


f1_score(y_valid,predicted_clf_valid)


# In[ ]:


result_metric=result_metric.append(metrics_model('clf_final',
                                                 y_valid, 
                                                 predicted_clf_valid,
                                                 probabilites_clf[:,1]),ignore_index=True)


# In[ ]:


result_metric


# <a id="–ø–æ—Ä–æ–≥_–¥–µ—Ä–µ–≤–æ"></a>
# ### –ü–æ—Ä–æ–≥ –¥–ª—è —Ä–µ—à–∞—é—â–µ–≥–æ –¥–µ—Ä–µ–≤–∞

# In[ ]:


tree = DecisionTreeClassifier(max_depth=6,random_state=12345)
tree.fit(x_upsampled,y_upsampled)


# In[ ]:


probabilites_tree_one = tree.predict_proba(x_valid)[:,1]


# In[ ]:


probabilites_tree_one


# In[ ]:


f1_best = 0
thresh = 0
prec = 0
rec = 0
for threshold in np.arange(0.3, 0.8, 0.02):
    predictions = (probabilites_tree_one>threshold)*1
    #recall_scores=0
    recall = recall_score(y_valid, predictions)
    f1 = f1_score(y_valid,predictions)
    #precision_scores=0
    precision = precision_score(y_valid, predictions)
    
    if f1 > f1_best:
        f1_best = f1
        thresh = threshold
        prec = precision
        rec = recall
            
print("–ü–æ—Ä–æ–≥ = {:.2f} | –¢–æ—á–Ω–æ—Å—Ç—å = {:.3f}, –ü–æ–ª–Ω–æ—Ç–∞ = {:.3f}, f1-–º–µ—Ä–∞ = {:.3f}".format(
                                                thresh, prec, rec ,f1_best))


# In[ ]:


tree


# In[ ]:


probabilites_tree = tree.predict_proba(x_valid)


# In[ ]:


predict_tree_valid = (probabilites_tree[:,1] > thresh)*1


# In[ ]:


f1_score(y_valid,predict_tree_valid)


# In[ ]:


result_metric=result_metric.append(metrics_model('tree_final',
                                                 y_valid, predict_tree_valid,
                                                 probabilites_tree[:,1]),ignore_index=True)


# In[ ]:


result_metric


# In[ ]:


ax = figure()
roc(y_valid,probabilites_clf[:,1],'clf_final',ax)
roc(y_valid,probabilites_tree[:,1],'tree_final',ax)


# –ò–∑–º–µ–Ω–∏–≤ –ø–æ—Ä–æ–≥ –¥–ª—è –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π, –º—ã –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ —Å–º–æ–≥–ª–∏ –ø–æ–¥–Ω—è—Ç—å —Ü–µ–ª–µ–≤–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑—Ä–æ–º –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ, –æ–±–µ –º–æ–¥–µ–ª–∏ –æ—Ç–≤–µ—á–∞—é—Ç —Ü–µ–ª–µ–≤—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º –∏ –º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –∏—Ö —Ä–∞–±–æ—Ç—É –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ.
# 
# 

# # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏

# In[ ]:


# –û–±—å–µ–¥–µ–Ω–∏–º –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É –≤—ã–±–æ—Ä–∫—É –∏ —Ç–µ—Å—Ç–æ–≤—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
x_final_train = pd.concat([x_upsampled] + [x_valid])
                        


# In[ ]:


y_final_train = pd.concat([y_upsampled] + [y_valid])


# In[ ]:


x_final_train, y_final_train = shuffle(
        x_final_train, y_final_train, random_state=12345)


# In[ ]:


len(x_final_train)


# In[ ]:


len(y_final_train)


# ### –°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å

# In[ ]:


clf = RandomForestClassifier(n_estimators=24, max_depth=10,random_state=12345)
clf.fit(x_final_train,y_final_train)


# In[ ]:


probabilites_clf = clf.predict_proba(x_test)


# In[ ]:


predicted_clf_test = (probabilites_clf[:,1] > 0.46)*1


# In[ ]:


f1_score(y_test,predicted_clf_test)


# In[ ]:


result_metric=result_metric.append(metrics_model('clf_test',
                                                 y_test, 
                                                 predicted_clf_test,
                                                 probabilites_clf[:,1]),ignore_index=True)


# ### –†–µ—à–∞—é—â–µ–µ –¥–µ—Ä–µ–≤–æ

# In[ ]:


tree = DecisionTreeClassifier(max_depth=6,random_state=12345)
tree.fit(x_final_train,y_final_train)


# In[ ]:


probabilites_tree = tree.predict_proba(x_test)


# In[ ]:


predict_tree_test = (probabilites_tree[:,1] > 0.44)*1


# In[ ]:


f1_score(y_test,predict_tree_test)


# <div style="border:solid orange 2px; padding: 20px"> <b>–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å</b><br>
# –í —Å—Ç—Ä–æ–∫–µ –≤—ã—à–µ –æ–ø–µ—á–∞—Ç–∫–∞, —Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Ç—Ä–∏–∫—É –Ω–∞–¥–æ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö</div>   

# <div class="alert alert-info" style="border:solid blue 2px; padding: 20px"> –°–ø–∞—Å–±–æ —á—Ç–æ —É–∫–∞–∑–∞–ª –Ω–∞ –æ—à–∏–±–∫—É, –∏—Å–ø—Ä–∞–≤–∏–ª </div>

# <div style="border:solid green 2px; padding: 20px"> <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ 2</b><br>üëç</div> 

# In[ ]:


result_metric=result_metric.append(metrics_model('tree_test',
                                                 y_test, predict_tree_test,
                                                 probabilites_tree[:,1]),ignore_index=True)


# In[ ]:


result_metric


# <div style="border:solid red 2px; padding: 20px"> <b>–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å</b><br>
# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤–µ—Ä–Ω–æ, —Ç–æ–ª—å–∫–æ –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—É—á–∏—Ç—å –Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ = <code>train + valid</code></div>

# <div class="alert alert-info" style="border:solid blue 2px; padding: 20px"> –û–∫, –ø–æ–ø—Ä–∞–≤–∏–ª. –ú–æ–∂–µ—à—å –ø–æ—è—Å–Ω–∏—Ç—å –∑–∞—á–µ–º —Ç–∞–∫–æ–π —Ç—Ä—é–∫ –¥–µ–ª–∞–µ—Ç—Å—è ? –ò –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–¥–±–∏—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –º—ã –º–µ–Ω—è–µ–º –æ–±—É—á–∞—é—â—É—é –≤—ã–±–æ—Ä–∫—É ? </div>

# <a class="anchor" id="21-bullet">

# <div style="border:solid green 2px; padding: 20px"> <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ 2</b><br>üëç –ù–µ—Ç, –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–±–∏—Ä–∞—Ç—å –Ω–µ –Ω–∞–¥–æ, –∏—Ö —É–∂–µ –ø–æ–¥–æ–±—Ä–∞–ª. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —ç—Ç–æ –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏. –û–± —ç—Ç–æ–º –ª—É—á—à–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ –Ω–∏–∂–µ</div> 

# In[ ]:


url = "http://storage.yandexcloud.net/public-bucket-6/split_data.mp4"


# In[ ]:


from IPython.display import Video
Video(url)


# #### –ò—Ç–æ–≥ 
# –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω—É–∂–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –º–æ–¥–µ–ª—è—Ö  "—Å–ª—É—á–∞–Ω—ã–π –ª–µ—Å"–∏ "—Ä–µ—à–∞—é—â–µ–µ –¥–µ—Ä–µ–≤–æ"
# 
# –¶–µ–ª–µ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á –ø—Ä–∏–º–µ–Ω—è—è —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏.
# 
# * –ü—Ä—è–º–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
# * –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–æ–≤, –ø—É—Ç–µ–º –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–∂–µ–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –≤ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫—É –±—ã–ª —É–≤–µ–ª–∏—á–µ–Ω –≤–¥–≤–æ–µ.
# * –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º class, –¥–ª—è –º–æ–¥–µ–ª–∏ —Ä–µ—à–∞—é—â–µ–µ –¥–µ—Ä–µ–≤–æ, –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–æ–≤ –Ω–µ–¥–∞–ª–∞ —É–ª—É—á—à–µ–Ω–∏–π, –ø–æ–∂—Ç–æ–º—É –±—ã–ª –ø—Ä–∏–º–µ–Ω–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä class
# * –ê–Ω–∞–ª–∏–∑ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞. –î–ª—è –æ–±–æ–∏—Ö –º–æ–¥–µ–ª–µ–π –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä–æ–≥, —á—Ç–æ –ø–æ–∑–≤–æ–ª–∏–ª–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –º–µ—Ç—Ä–∏–∫—É.
# 

# In[ ]:





# <hr style="border: 2px solid green;" />
# 
# ## –û–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
# –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω—É—é —Ä–∞–±–æ—Ç—Éü§ù
# 
# –†–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ö–æ—Ä–æ—à–æ. –¢—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è\—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π, –≤–µ—Ä–Ω–æ –ø—Ä–∏–º–µ–Ω–∏–ª –º–µ—Ç–æ–¥—ã –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤\–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤.
# 
# –ï—Å—Ç—å —Ä—è–¥ —Å–ø–æ—Ä–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤:
# - –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –ø—Ä–∏–∑–Ω–∞–∫–µ `tenure` —Å—Ç—Ä–æ–∫–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
# - –±—ã–ª–æ –±—ã –∑–¥–æ—Ä–æ–≤–æ, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ upsampling –Ω–æ –∏ downsampling
# 
# **–î–æ—Ä–∞–±–æ—Ç–∞—Ç—å**
# - –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—ã–±–æ—Ä–∫–∏ train\valid, –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—ë –Ω–∞ test
# 
# –ò—Å–ø—Ä–∞–≤–ª—è–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—Éüõ†

# <div class="alert alert-info" style="border:solid blue 2px; padding: 20px"> ¬†–ü—Ä–∏–≤–µ—Ç –û–ª–µ–≥, —Å–ø–∞—Å–∏–±–æ –∑–∞ –±—ã—Å—Ç—Ä—ã –æ—Ç–∫–ª–∏–∫ –ø–æ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ. –£—á–µ–ª —Ç–≤–æ–∏ –∑–∞–º–µ—á–Ω–∏—è. –ü–æ–ø—Ä–∞–≤–∏–ª –ø—Ä–æ–µ–∫—Ç. –° –±–∞–ª–∞–Ω—Å–æ–º —è –µ—â–µ –ø–æ–∏–≥—Ä–∞—é—Å—å.</div>

# # –ß–µ–∫-–ª–∏—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞

# –ü–æ—Å—Ç–∞–≤—å—Ç–µ 'x' –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö. –î–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ Shift+Enter.

# - [x]  Jupyter Notebook –æ—Ç–∫—Ä—ã—Ç
# - [x]  –í–µ—Å—å –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
# - [x]  –Ø—á–µ–π–∫–∏ —Å –∫–æ–¥–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
# - [x]  –í—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥ 1: –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã
# - [x]  –í—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥ 2: –∑–∞–¥–∞—á–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∞
#     - [x]  –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω –±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤
#     - [x]  –ò–∑—É—á–µ–Ω—ã –º–æ–¥–µ–ª–∏ –±–µ–∑ —É—á—ë—Ç–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞
#     - [x]  –ù–∞–ø–∏—Å–∞–Ω—ã –≤—ã–≤–æ–¥—ã –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
# - [x]  –í—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥ 3: —É—á—Ç—ë–Ω –¥–∏—Å–±–∞–ª–∞–Ω—Å
#     - [x]  –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –±–æ—Ä—å–±—ã —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º
#     - [x]  –ù–∞–ø–∏—Å–∞–Ω—ã –≤—ã–≤–æ–¥—ã –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
# - [x]  –í—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥ 4: –ø—Ä–æ–≤–µ–¥–µ–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# - [x]  –£–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á—å *F1*-–º–µ—Ä—ã –Ω–µ –º–µ–Ω–µ–µ 0.59
# - [x]  –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ *AUC-ROC*

# In[ ]:




